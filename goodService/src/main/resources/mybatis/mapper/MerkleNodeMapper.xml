<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mine.cloud.DMicro.dao.MerkleNodeMapper">
  <resultMap id="BaseResultMap" type="mine.cloud.DMicro.pojo.MerkleNode">
    <id column="merkle_node_id" jdbcType="INTEGER" property="merkleNodeId" />
    <result column="merkle_node_index" jdbcType="INTEGER" property="merkleNodeIndex" />
    <result column="block_index" jdbcType="INTEGER" property="blockIndex" />
    <result column="is_leaf_node" jdbcType="INTEGER" property="isLeafNode" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="merkle_data" jdbcType="VARCHAR" property="merkleData" />
    <result column="info_id" jdbcType="INTEGER" property="infoId" />
  </resultMap>
  <sql id="Base_Column_List">
    merkle_node_id, merkle_node_index, block_index, is_leaf_node, hash, merkle_data,info_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from merkle_node
    where merkle_node_id = #{merkleNodeId,jdbcType=INTEGER}
  </select>
  <select id="selectBySelective" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from merkle_node
    where 1=1
    <if test="merkleNodeId != null">
     AND merkle_node_id = #{merkleNodeId,jdbcType=INTEGER}
    </if>
    <if test="merkleNodeIndex != null">
     AND merkle_node_index = #{merkleNodeIndex,jdbcType=INTEGER}
    </if>
    <if test="blockIndex != null">
     AND block_index = #{blockIndex,jdbcType=INTEGER}
    </if>
    <if test="isLeafNode != null">
     AND is_leaf_node = #{isLeafNode,jdbcType=INTEGER}
    </if>
    <if test="hash != null">
     AND hash = #{hash,jdbcType=VARCHAR}
    </if>
    <if test="merkleData != null">
     AND merkle_data = #{merkleData,jdbcType=VARCHAR}
    </if>
    <if test="infoId != null">
      AND info_id = #{infoId,jdbcType=INTEGER}
    </if>
    order by merkle_node_id
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from merkle_node
    where merkle_node_id = #{merkleNodeId,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" parameterType="mine.cloud.DMicro.pojo.MerkleNode">
    insert into merkle_node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="merkleNodeId != null">
        merkle_node_id,
      </if>
      <if test="merkleNodeIndex != null">
        merkle_node_index,
      </if>
      <if test="blockIndex != null">
        block_index,
      </if>
      <if test="isLeafNode != null">
        is_leaf_node,
      </if>
      <if test="hash != null">
        hash,
      </if>
      <if test="merkleData != null">
        merkle_data,
      </if>
      <if test="infoId != null">
        info_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="merkleNodeId != null">
        #{merkleNodeId,jdbcType=INTEGER},
      </if>
      <if test="merkleNodeIndex != null">
        #{merkleNodeIndex,jdbcType=INTEGER},
      </if>
      <if test="blockIndex != null">
        #{blockIndex,jdbcType=INTEGER},
      </if>
      <if test="isLeafNode != null">
        #{isLeafNode,jdbcType=INTEGER},
      </if>
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="merkleData != null">
        #{merkleData,jdbcType=VARCHAR},
      </if>
      <if test="infoId != null">
        #{info_id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <insert id="insertBatchMerkleNode">
    insert into merkle_node(merkle_node_id,merkle_node_index,block_index,is_leaf_node,hash,merkle_data,info_id)
    VALUES
    <foreach collection="list" item="item" index="index" separator= ",">
      (
      COALESCE(#{item.merkleNodeId}),
      COALESCE(#{item.merkleNodeIndex},'-1'),
      COALESCE(#{item.blockIndex},'-1'),
      COALESCE(#{item.isLeafNode},'0'),
      COALESCE(#{item.hash},''),
      COALESCE(#{item.merkleData},''),
      COALESCE(#{item.infoId},'-1')
      )
    </foreach>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="mine.cloud.DMicro.pojo.MerkleNode">
    update merkle_node
    <set>
      <if test="merkleNodeIndex != null">
        merkle_node_index = #{merkleNodeIndex,jdbcType=INTEGER},
      </if>
      <if test="blockIndex != null">
        block_index = #{blockIndex,jdbcType=INTEGER},
      </if>
      <if test="isLeafNode != null">
        is_leaf_node = #{isLeafNode,jdbcType=INTEGER},
      </if>
      <if test="hash != null">
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="merkleData != null">
        merkle_data = #{merkleData,jdbcType=VARCHAR},
      </if>
      <if test="infoId != null">
        info_id = #{infoId,jdbcType=VARCHAR},
      </if>
    </set>
    where merkle_node_id = #{merkleNodeId,jdbcType=INTEGER}
  </update>

  <select id="selectByMerkleIdx" resultMap="BaseResultMap" parameterType="java.util.List">
    select
    <include refid="Base_Column_List" />
    from merkle_node
    <where>
      merkle_node_index in
      (
      <foreach collection="list" item="id" index="index" separator=",">
        #{id}
      </foreach>
      )
    </where>
  </select>
</mapper>